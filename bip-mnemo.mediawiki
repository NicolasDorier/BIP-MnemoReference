<pre>BIP: xxxx
Title: Mnemonic code for referencing transaction output in the blockchain
Authors: Nicolas Dorier, jl2012
Status: Draft
Type: Standards Track
Created: 2015</pre>

==Abstract==

This BIP describes the implementation of a mnemonic code for referencing any transaction output in the blockchain.
It proposes several improvements over firstbits, like SPV compatibility, ease of memorization, and checksum.

==Motivation==

The scheme allows anyone to keep in his memory a reference to any block/transaction/output in the blockchain.
It also permit to transfer such information by voice over the phone easily.

Some potential use case are:

* Remembering his own bitcoin address (as everybody knows his own phone number)
* Remembering any payment url (BIP70), by publishing it on the blockchain and referencing it (in an OP_RETURN)
* Remembering his own Stealth Address (published in OP_RETURN)

==Generating the mnemonic address==

Definitions:

Decode/Encode functions encode and decode integers in little endian
blockHeight: the height of the referenced block. Genesis block is 0
blockHash: the hash of the referenced block
txIndex: index of the referenced transaction in the block. Index of the first transaction in a block is 0
outputIndex: index of the referenced output in the transaction. Index of the first output in a transaction is 0
scriptPubKey: the scriptPubKey of the referenced output
c: a fixed integer, the minimal number of bits for checksum (to be defined later)
ymin = ceiling(log(txIndex + 1, 2))
zmin = ceiling(log(outputIndex + 1, 2))

Step1: Get encodedBlockHeight, and its number of bits, x:

    if(blockHeight =< 1,048,575)
        x = 22 
        encodedBlockHeight = 0|Encode(blockHeight,21)
    if(1,048,575 < blockHeight && blockHeight <= 8,388,607)
        x = 24
        encodedBlockHeight = 1|Encode(blockHeight,23)
    else
        error

Step2: Determine the lower bound of words required for the mnemonic address

    w = ceiling((x + ymin + zmin + c + 1)/11)

Step3: Determine the number of bits for txIndex
txIndex takes y bits:

    y1 = ceiling(log(total number of transactions in the block, 2))
    y2 = 11w-1-x-c
    y = min(y1, y2)
    If (ymin > y), increase w by 1 and go back to Step 3 (This condition is not possible as the initial value of w must provide enough space for ymin)

Step4: Determine the number of bits for outputIndex
outputIndex takes z bits:

    z1 = ceiling(log(total number of output in the transaction, 2))
    z2 = 11w-1-x-y-c
    z = min(z1, z2)
    If (zmin > z), increase w by 1 and go back to Step 3

Step5: Calculate the checksum, and its bit count, cs: (Little endian)

    cs = 11w-1-x-y-z
    checksum = SubString(SHA256(SHA256(blockHash|txIndex|outputIndex|scriptPubKey)), cs)

Step6: Get the rawAddress, encoded by using the number of bits calculated previously  

    rawAddress = encodedBlockHeight|Encode(txIndex,y)|Encode(outputIndex,z)|checksum

Step7: Get the encryptionKey,  the least significant c bits of rawAddress

    encryptionKey = Substring(rawAddress, from:rawAddress.Length-c, count:c)

Step8: Get the encryptedAddress,

    encryptedAddress = XOR(Substring(rawAddress,from:0, count:rawAddress.Length-c),encryptionKey)

Step9: Get the finalAddress,

    finalAddress = encryptedAddress|encryptionKey|0

The last 0 denotes the address version

Step10: Convert finalAddress into mnemonic code following BIP-0039

==Decoding the mnemonic address==

Step1: Determine w = number of words in the mnemonic code

Step2: Convert mnemonic code into finalAddress following BIP-0039

Step3: Check is the last bit of finalAddress is 0, if not, returns an error

Step4: Get the encryptionKey

    encryptionKey = Substring(finalAddress,from:finalAddress.Length-1-c, count:c)

Step5: Get the rawAddress

    rawAddress = XOR(Substring(finalAddress,from: 0, to: finalAddress.Length - 1 - c) ,encryptionKey)

Step6: Determine the blockHeight and x

    if(rawAddress[0] == 0)
        x = 22
        blockHeight = Decode(Substring(rawAddress,1,21))
    else
        x = 24
        blockHeight = Decode(Substring(rawAddress,1,23))    

Step7: Determine the txIndex and y

    Look up the blockchain for the referenced block and determine the total number of transactions in the block
    y1 = ceiling(log(total number of transactions in the block, 2))
    y2 = 11w-1-x-c
    y = min(y1, y2)
    txIndex = Decode(Substring(rawAddress,from:x,count:y))
    If the transaction does not exist, return error

Step8: Determine the outputIndex and z

    Look up the referenced transaction and determine the total number of outputs in the transaction
    z1 = ceiling(log(total number of outputs in the transaction, 2))
    z2 = 11w-1-x-y-c
    z = min(z1, z2)
    outputIndex = Decode(Substring(rawAddress, from:x+y,count:z))
    If the output does not exist, return error

Step9: Calculate the checksum (Little endian)

    Determine the blockHash and scriptPubKey
    cs = rawAddress.Length - x - y - z
    checksum = Substring(SHA256(SHA256(blockHash|txIndex|outputIndex|scriptPubKey)), cs)
    valid = checksum == Substring(rawAddress,from:x + y + z, count:cs)

If valid, the address is successfully resolved. Otherwise, return error.

==SPV client compatibility==

The algorithm for decoding a mnemonic reference only depends on the transaction, its index in the block and the transaction count of its block.

It results that a SPV Client can decode a mnemonic reference in two ways :
* By getting the block from the network at the height specified by the mnemonic,
* By asking the merkleblock + Transaction to a potentially untrusted third party,

In either case, the SPV client do not have to store the full blockchain, and can't be subject to a replacement attack.

==Test vectors==

==Reference implementations==

NBitcoin (C#): [https://github.com/NicolasDorier/NBitcoin/blob/master/NBitcoin/MnemonicReference.cs MnemonicReference class]